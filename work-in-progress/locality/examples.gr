g2g : Int [Global] -> Int [Global]
g2g x = x

g2l : Int [Global] -> Int [Local]
g2l x = x

l2l : Int [Local] -> Int [Local]
l2l x = x

a2l : Int [Arb] -> Int [Local]
a2l x = x

a2g : Int [Arb] -> Int [Global]
a2g x = x

-- this should be okay
fine1 : forall {a : Type} . a [Global] -> a [Global]
fine1 [x] = [x]

-- bad1 : forall {a : Type} . a [Local] -> a [Global]
-- bad1 [x] = [x]

-- Disallowed by Agda
--
--    ---------------------- :: var
--    x : Local a |- x : a
--    --------------------- :: box_i
--    x : Local a |- [x] : a [Local]
--    ---------------------- :: box_i
--    x : Global x |- [[x]] : a [Global]

-- bad2 : forall {a : Type} . a [Local] -> (a [Local]) [Global]
-- bad2 [x] = [[x]]

local : Int [Local]
local = [42]

bad3 : âˆ€ {a : Type} . a [Local] -> (a, a [Global])
bad3 [x] = (x, [x])

main : (Int, Int [Global])
main = bad3 local


-- these should be ok

-- (+') : Int [Local] -> Int [Local] -> Int
-- (+') : Int [Arb] -> Int [Arb] -> Int [Global]

-- BUILTIN
-- moveToHeap : forall (a : Type) . a -> a [Global]

-- these are not ok!

-- l2g : Int [Local] -> Int [Global]
-- l2g x = x

-- l2a : Int [Local] -> Int [Arb]
-- l2a x = x

-- -- this is fine on Jane Street
-- g2a : Int [Global] -> Int [Arb]
-- g2a x = x
